# 출력문-----------------------------------------------------
x = 10
y = 20
z = x + y
print(z)
cat("x + y = ",z)
print("x + y = ", z)
# 불완전한 명령문 실행---------------------------------------
(4+4)
(4+)
# (4+) # error : 붕완전한 명령문 실행
(4+2
)
# (4+) # error : 불완전한 명령문 실행
# (4+2 # console에 ')'를 입력하면 실행됨
(5+
7
8
# (4+) # error : 불완전한 명령문 실행
# (4+2 # console에 ')'를 입력하면 실행됨
(5+ # console에 '7', ')'를
7
2)
e
# 변수----------------------------------------------------------
# 변수가 필요한 이유 : 수많은 빅데이터를 컴퓨터 메모리에 저장해놓고 사용하기 위해
# 변수 생성 규칙
A <- 5
A <- 10
# 변수명 규칙
# 1. 영문으로 시작
# 2. 숫자 _ . 사용 가능
# 3.
A.val <- 10
A_val <- 5
a.val <- 20
a_val <- 25
A.val <- 0
B <- 40
B = 50
korea_travel <- '서울'
korea_travel <- '서울'
korea_travel1 <- '서울'
print(korea_travel1)
korea_travel2 <- '제주'
KOREA_TRAVEL1 <- '부산'
# vector--------------------------------------------------------
# 하나의 변수에 여러 값을 저장
# c()함수 사용 : 결합, combine
value1 = c(1:10)
print(value1)
value2 <- c(1,2,3,4,5,6,7,8,9,10)
print(value2)
value3 <- (1,2,3,4,5,6,7,8,9,10)
value3 <- c(T, T, F, FALSE, TRUE, F, T)
vaule4 <- c("T", "T", "F", "TRUE", "FALSE")
print(value4)
value4 <- c("T", "T", "F", "TRUE", "FALSE")
print(value4)
value5 <- c("만두", 1, 5.4, TRUE)
# c()함수 사용 : 결합, combine
value1 <- c(1:10)
print(value1)
value2 <- c(1,2,3,4,5,6,7,8,9,10)
print(value2)
# value3 <- (1,2,3,4,5,6,7,8,9,10)
# error : c()함수 사용 필요
# 논리값 저장
value3 <- c(T, T, F, FALSE, TRUE, F, T)
# 문자열 저장
value4 <- c("T", "T", "F", "TRUE", "FALSE")
print(value4)
value5 <- c("만두", 1, 5.4, TRUE)
# 여러 데이터타입을 함께 저장할수도 있음 : chr문자열로 처리됨
value5 <- c("만두", 1, 5.4, -7, TRUE)
print(value5)
value6 <- c(5, 0.0, 3,14, -6)
print(value6)
value6 <- c(5, 0.0, 3.14, -6)
print(value6)
#-----------------------------------------------------------
# seq()
val1 <- seq(1, 20, 2)
print(val1)
val2 <- seq(from=1, to=20, by=2)
print(val2)
# rep()
val3 <- rep(1:6, 3)
print(val3)
val4 <- rep(x=1:6, each=3)
print(val4)
# paste()
a <- c("부천", '인천', '서울', '김포')
b <- c('강원도', '제주도', '경기도')
paste(a, b, sep='')
paste(a, b, sep='//')
paste('대한민국','강산','아름답고','푸르게','푸르게', collapse="|")
paste('대한민국','강산','아름답고','푸르게','푸르게', collapse="|")
paste(c('대한민국','강산','아름답고','푸르게','푸르게'), collapse="|")
# substr()
ss <-c("하모니", '우연히', '해외여행')
ss
substr(ss, 1, 2)
substr(ss, 2, 3)
substr('대한민국동해남해서해바다', 1, 6)
# vector 데이터 처리함수
x <- c(1,3,6,7,9,10)
y <- c(2,4,6,8,10)
# union()
z1 <- union(x,y)
print(z1)
# setdiff() : 차집합
z2 <- setdiff(x,y)
z2 <- setdiff(y,x)
# setdiff() : 차집합
z2 <- setdiff(x,y)
z3 <- setdiff(y,x)
z2;z3
# intersect() : 교집합
z4 <- intersect(x,y)
z4
#---------------------------------------------------------------------------
# 데이터형 확인 함수
val1 <- c(1:10)
val1
mode(val1)
class(val1)
typeof(val1)
val2 <- c(T, T, F, TRUE, FALSE)
mode(val2)
class(val2)
typeof(val2)
val3 <- c('만두', '짜장면', '탕수육')
mode(val3)
class(val3)
typeof(val3)
val4 <- c(1, 5.4, -7, 4.52)
mode(val4)
class(val4)
typeof(val4)
val1 <- c(1:10)
val2 <- c(1, 5.4, -7, 4.52)
val3 <- c(T, T, F, TRUE, FALSE)
val4 <- c('만두', '짜장면', '탕수육')
mode(val1)
class(val1)
typeof(val1)
mode(val2)
class(val2)
typeof(val2)
mode(val3)
class(val3)
typeof(val3)
mode(val4)
class(val4)
typeof(val4)
#---------------------------------------------------------------------------
# 1차원 객체 : factor
# c() 함수도 1차원 형태로 데이터 저장
h <- c('서울', '부산', '경기', '서울', '경기', '경기', '제주')
#---------------------------------------------------------------------------
# 1차원 객체 : factor
# c() 함수도 1차원 형태로 데이터 저장
h <- c('서울', '부산', '경기', '서울', '경기', '경기', '제주')
h
h.new <- factor(h) # vector >>> factor 변환
h.new
# levels : 범주형 데이터를 저장할 때 사용
h[3]
h.new[3]
levels(h.new)
h <- c('서울', '부산', '경기', '서울', '경기', '경기', '제주')
# levels : 범주형 데이터를 저장할 때 사용
levels(h)
# unique : vector도 범주형처럼 level 확인 가능
unique(h)
unique(h.new)
# 특정 데이터형을 정수형으로 변환
h.i <- as.integer(h.new)
h.i
unique(h.i)
h.new
h.new[3]
h.new[4]
h.new[4] <- '울릉도'
h.new[4] <-'제주'
h.new
a <-c(1:5)
m1 <- matrix(a)
m1
# matrix 함수구조 (속성값 1부터 10까지, 2행)
m2 <- matrix(C(1:10), nrow=2)
m2
m3 <-matrix(c(1:13), nrow=3)
a
# m3 <-matrix(c(1:13), nrow=3)
# error : 3행을 채울만큼 데이터가 모자람
m3
# 요소 추가
m3[1,3]
m3[1,]
m3[,1]
m3[1,c(2:5)]
m4 <- matrix(c(1:10), ncol=2)
m4
# matrix 함수구조 (속성값 1부터 10까지, 2열)
m4 <- matrix(c(1:10), ncol=2)
m4
m5 <- matrix(c(1:10), ncol=3)
m5
# 3열을 채울만큼 데이터가 모자람 -> 앞 요소 반복 저장
m5 <- matrix(c(1:10), ncol=3)
m5
m6 <-matrix(c(1:16), nrow=2)
m6
m6 <-matrix(c(1:16), nrow=2, byrow=TRUE)
m6
# 행렬 변경
# 저장 반향 변경
m7 <-matrix(c(1:16), nrow=2, byrow=TRUE)
m7
m8 <-matrix(c(1:16), nrow=2, byrow=FALSE)
m8
m6 == m8
m6 <-matrix(c(1:16), nrow=2)
m6
m6 == m8
m9 <-matrix(c(1:10), ncol=2, byrow=TRUE)
m9
m10 <-matrix(c(1:10), ncol=2, byrow=F)
m10
# 행 길이 확인 함수
length(m7)
m7
# 행 길이 확인 함수
# 열 길이 확인 함수
ncol(m7)
# 행 길이 확인 함수
nrow(m7)
# apply() 함수
m7 <-matrix(c(1:16), nrow=2, byrow=FALSE)
# apply() 함수
m8 <-matrix(c(1:16), nrow=2, byrow=FALSE)
# 행과 열 변경
# 저장 방향 변경
m7 <-matrix(c(1:16), nrow=2, byrow=TRUE)
m7
m8 <-matrix(c(1:16), nrow=2, byrow=FALSE)
m8 # m6 == m8
# 2열 matrix 생성
m9 <-matrix(c(1:10), ncol=2, byrow=TRUE)
m9
# 행과 열 변경
# 저장 방향 변경
m10 <-matrix(c(1:10), ncol=2, byrow=F)
m10
m7
length(m7) # 저장된 데이터 개수
nrow(m7) # 행 길이 확인 함수
ncol(m7) # 열 길이 확인 함수
# apply() 함수
m8 <-matrix(c(1:16), nrow=2, byrow=FALSE)
m8
# apply(matrix, row, max/min) 함수
apply(m8, 1, max)
apply(m8, 1, min)
apply(m8, 2, max)
apply(m8, 2, min)
apply(m8, 2, avg)
apply(m8, 1, sum)
apply(m8, 2, sum)
# 행과 열의 이름 지정 함수
m1 <- matrix(c(1:10), ncol=2)
m1
# 행과 열의 이름 지정 함수
m1 <- matrix(c(1:10), ncol=2, byrow=F)
m1
colnames(m9) <- c("한국인", "외국인")
colnames(m1) <- c("한국인", "외국인")
rownames(m1) <-c('수학', '영어', '국어', '사회', '과학')
m1
m1[,'국어']
m1[,'한국인']
m1['수학',]
m1['영어','외국인']
m1['영어', 1]
m1['영어', 2]
m1
# 행과 열의 데이터 결합 함수
x1 <- c(1:5)
y1 <- c(31:35)
x1
y1
# rbind()
z1 <- rbind(x1, y1)
z1
# cbind() : 각각의 데이터를 하나의 열로 만들어 결합
z2 <- cbind(x1, y1)
z2
# 3차원 데이터 array
val <- c(1:10)
val
arr <- array(val)
arr
arr <- array(val, c(3,3,3))
arr
# 3차원 데이터 array
val <- c(1:9)
arr <- array(val, c(3,3,3)) # 모자라는 만큼 반복해서 저장
arr
arr[1,,]
# 3차원 데이터 array
val <- c(1:27)
arr <- array(val, c(3,3,3)) # 모자라는 만큼 반복해서 저장
arr
arr[1,,]
arr[,2,3]
arr[,,2]
arr[2,,]
arr[1,2,3]
df1 <- data.frame(x=c(1:3), y=c(2,6,2), z=c("가", "나", "다"))
df1
df1 <- data.frame(x=c(100:102), y=c(2,6,2), z=c("가", "나", "다"))
df1
df1 <- data.frame(x=c(100:102), y=c(2.1,6.77,2.03), z=c("가", "나", "다"))
df1
df2 <-dat.frame(x=c(1:3), y=seq(2,8,2), z=c('a','b','c','d'))
df2 <-data.frame(x=c(1:3), y=seq(2,8,2), z=c('a','b','c','d'))
num <- c(1,2,3)
na <- c('apple', 'banana', 'melon')
mo <- c(500, 400, 300)
num <- c(1,2,3)
na <- c('apple', 'banana', 'melon')
add <-c('X', 'Y', 'Z')
mo <- c(500, 400, 300)
add <-c('M', 'F', 'F')
gg1 <- data.frame("No"=num, "fruit"=na, "gender"=add, "height"=mo)
gg1
add <-c('M', 'M', 'F')
mo <- c(174, 181, 162)
gg1 <- data.frame("No"=num, "fruit"=na, "gender"=add, "height"=mo)
gg1
# matrix 구조로 만들기도 가능
student1 <- matrix(
c(1,'Kim', 'US', 500,
2, 'Lee', 'Korea', 300,
3, 'Choi', 'Japan', 400)
)
student1
# matrix 구조로 만들기도 가능
student1 <- matrix(
c(1,'Kim', 'US', 500,
2, 'Lee', 'Korea', 300,
3, 'Choi', 'Japan', 400), 3, byrow=T
)
student1
gg1
num <- c(1,2,3)
na <- c('apple', 'banana', 'melon')
add <-c('M', 'M', 'F')
mo <- c(174, 181, 162)
num <- c(1,2,3)
na <- c('apple', 'banana', 'melon')
add <-c('M', 'M', 'F')
mo <- c(174, 181, 162)
student1 <- data.frame("No"=num, "fruit"=na, "gender"=add, "height"=mo)
student1
# matrix 구조로 만들기도 가능
student2 <- matrix(
c(1,'apple', 'M', 174,
2, 'banana', 'M', 181,
3, 'Cmelon', 'F', 162), 3, byrow=T
)
student2
student1
df2 <-data.frame(student2)
df2
colnames(df2) <- c("No", 'fruit', ,'gender', 'height')
colnames(df2) <- c("No", 'fruit','gender', 'height')
df2
student1
str(df2)
str(student1)
$student1
student1$fruit
student1$gender
names(student1)
ncol(student1)
student1
nrow(student1)
nrow(student1) # 행 개수
student1[c(2:3), 3]
# subset()
df3 <- data.frame(x=c(1:5), y=seq(2,10,2), z=c('a','b','c','d','e'))
df3
# subset()
df3 <- data.frame(x=c(10:5), y=seq(2,10,2), z=c('a','b','c','d','e'))
df3
# subset()
df3 <- data.frame(x=c(10:6), y=seq(2,10,2), z=c('a','b','c','d','e'))
df3
sub1 <-subset(df3, x>7)
sub1
sub2 <-subset(df3, (x>6 & y>6))
sub2
sub2 <-subset(df3, (x>6 & y>4))
sub2
sub3 <-subset(df3, (x>6 | y>4))
sub3
sub3 <-subset(df3, (x>8 | y>6))
sub3
sub3 <-subset(df3, (x>9 | y>6))
sub3
na <-data.frame('No'=c(1:4), 'name'=c('kim','lee','park','na'))
na
tel <-data.frame('no'=c(2,3,4,7), 'tel'=c('02','031','032','010'))
tel
# merge() : df 병합
user1 <-merge(na, tel, by.x='No', by.y="No")
# merge() : df 병합
user1 <-merge(na, tel, by.x='No', by.y="No")
tel <-data.frame('No'=c(2,3,5,7), 'tel'=c('02','031','032','010'))
# merge() : df 병합
user1 <-merge(na, tel, by.x='No', by.y="No")
user1
# merge() : df 병합
# 두 'No'가 같은 행만 추출, 병합됨
user1 <-merge(na, tel, by.x='No', by.y="No")
user1
user2 <-merge(na, tel, by.x='No')
user2
a <-c(11:15)
b <-c(21:25)
c <-c(41:45)
x <-data.frame(a,b,c)
x
colnames(x) <-c('A 제품 판매', 'B 제품 판매', 'C 제품 판매')
x
rownames(x) <-c('서울', '경기', '인천', '대전')
x
rownames(x) <-c('서울', '경기', '인천', '대전', '광주')
x
# colsums()
colsums(x[,-4])
# colsums()
colsums(x[,-2])
# colSums()
colSums(x[,-2])
colSums(x[,-4])
colSums(x[,])
colSums(x[,-3])
colSums(x[,-3]) # C 제외
colSums(x[,-1])
# rowSum() : 행 합계
rowSums(x[,])
rowSums(x[2,3])
rowSums(x[2,])
rowSums(x[4,])
rowSums(x[,4])
# colSums() : 열 합계
# 열 합계이므로 콤마(,) 뒤에만 인덱스를 입력할 수 있다
colSums(x[2,]) # 모든 열 합계
# colSums() : 열 합계
# 열 합계이므로 콤마(,) 뒤에만 인덱스를 입력할 수 있다
colSums(x[2,]) # 모든 열 합계
colSums(x[,]) # 모든 열 합계
# colSums() : 열 합계
# 열 합계이므로 콤마(,) 뒤에만 인덱스를 입력할 수 있다
colSums(x[2,]) # 모든 열 합계
# colSums() : 열 합계
# 열 합계이므로 콤마(,) 뒤에만 인덱스를 입력할 수 있다
colSums(x[0,]) # 모든 열 합계
# rowSum() : 행 합계
rowSums(x[,]) # 모든 행 합계
x
rowSums(x[-3,])
rowSums(x[,-3])
colSums(x[-1,]) # A제외
colSums(x[-2,]) # 서울 제외
# colMeans() : 열 평균
colMeans(x[,])
rowMeans(x[,])
