# 행 길이 확인 함수
nrow(m7)
# apply() 함수
m7 <-matrix(c(1:16), nrow=2, byrow=FALSE)
# apply() 함수
m8 <-matrix(c(1:16), nrow=2, byrow=FALSE)
# 행과 열 변경
# 저장 방향 변경
m7 <-matrix(c(1:16), nrow=2, byrow=TRUE)
m7
m8 <-matrix(c(1:16), nrow=2, byrow=FALSE)
m8 # m6 == m8
# 2열 matrix 생성
m9 <-matrix(c(1:10), ncol=2, byrow=TRUE)
m9
# 행과 열 변경
# 저장 방향 변경
m10 <-matrix(c(1:10), ncol=2, byrow=F)
m10
m7
length(m7) # 저장된 데이터 개수
nrow(m7) # 행 길이 확인 함수
ncol(m7) # 열 길이 확인 함수
# apply() 함수
m8 <-matrix(c(1:16), nrow=2, byrow=FALSE)
m8
# apply(matrix, row, max/min) 함수
apply(m8, 1, max)
apply(m8, 1, min)
apply(m8, 2, max)
apply(m8, 2, min)
apply(m8, 2, avg)
apply(m8, 1, sum)
apply(m8, 2, sum)
# 행과 열의 이름 지정 함수
m1 <- matrix(c(1:10), ncol=2)
m1
# 행과 열의 이름 지정 함수
m1 <- matrix(c(1:10), ncol=2, byrow=F)
m1
colnames(m9) <- c("한국인", "외국인")
colnames(m1) <- c("한국인", "외국인")
rownames(m1) <-c('수학', '영어', '국어', '사회', '과학')
m1
m1[,'국어']
m1[,'한국인']
m1['수학',]
m1['영어','외국인']
m1['영어', 1]
m1['영어', 2]
m1
# 행과 열의 데이터 결합 함수
x1 <- c(1:5)
y1 <- c(31:35)
x1
y1
# rbind()
z1 <- rbind(x1, y1)
z1
# cbind() : 각각의 데이터를 하나의 열로 만들어 결합
z2 <- cbind(x1, y1)
z2
# 3차원 데이터 array
val <- c(1:10)
val
arr <- array(val)
arr
arr <- array(val, c(3,3,3))
arr
# 3차원 데이터 array
val <- c(1:9)
arr <- array(val, c(3,3,3)) # 모자라는 만큼 반복해서 저장
arr
arr[1,,]
# 3차원 데이터 array
val <- c(1:27)
arr <- array(val, c(3,3,3)) # 모자라는 만큼 반복해서 저장
arr
arr[1,,]
arr[,2,3]
arr[,,2]
arr[2,,]
arr[1,2,3]
df1 <- data.frame(x=c(1:3), y=c(2,6,2), z=c("가", "나", "다"))
df1
df1 <- data.frame(x=c(100:102), y=c(2,6,2), z=c("가", "나", "다"))
df1
df1 <- data.frame(x=c(100:102), y=c(2.1,6.77,2.03), z=c("가", "나", "다"))
df1
df2 <-dat.frame(x=c(1:3), y=seq(2,8,2), z=c('a','b','c','d'))
df2 <-data.frame(x=c(1:3), y=seq(2,8,2), z=c('a','b','c','d'))
num <- c(1,2,3)
na <- c('apple', 'banana', 'melon')
mo <- c(500, 400, 300)
num <- c(1,2,3)
na <- c('apple', 'banana', 'melon')
add <-c('X', 'Y', 'Z')
mo <- c(500, 400, 300)
add <-c('M', 'F', 'F')
gg1 <- data.frame("No"=num, "fruit"=na, "gender"=add, "height"=mo)
gg1
add <-c('M', 'M', 'F')
mo <- c(174, 181, 162)
gg1 <- data.frame("No"=num, "fruit"=na, "gender"=add, "height"=mo)
gg1
# matrix 구조로 만들기도 가능
student1 <- matrix(
c(1,'Kim', 'US', 500,
2, 'Lee', 'Korea', 300,
3, 'Choi', 'Japan', 400)
)
student1
# matrix 구조로 만들기도 가능
student1 <- matrix(
c(1,'Kim', 'US', 500,
2, 'Lee', 'Korea', 300,
3, 'Choi', 'Japan', 400), 3, byrow=T
)
student1
gg1
num <- c(1,2,3)
na <- c('apple', 'banana', 'melon')
add <-c('M', 'M', 'F')
mo <- c(174, 181, 162)
num <- c(1,2,3)
na <- c('apple', 'banana', 'melon')
add <-c('M', 'M', 'F')
mo <- c(174, 181, 162)
student1 <- data.frame("No"=num, "fruit"=na, "gender"=add, "height"=mo)
student1
# matrix 구조로 만들기도 가능
student2 <- matrix(
c(1,'apple', 'M', 174,
2, 'banana', 'M', 181,
3, 'Cmelon', 'F', 162), 3, byrow=T
)
student2
student1
df2 <-data.frame(student2)
df2
colnames(df2) <- c("No", 'fruit', ,'gender', 'height')
colnames(df2) <- c("No", 'fruit','gender', 'height')
df2
student1
str(df2)
str(student1)
$student1
student1$fruit
student1$gender
names(student1)
ncol(student1)
student1
nrow(student1)
nrow(student1) # 행 개수
student1[c(2:3), 3]
# subset()
df3 <- data.frame(x=c(1:5), y=seq(2,10,2), z=c('a','b','c','d','e'))
df3
# subset()
df3 <- data.frame(x=c(10:5), y=seq(2,10,2), z=c('a','b','c','d','e'))
df3
# subset()
df3 <- data.frame(x=c(10:6), y=seq(2,10,2), z=c('a','b','c','d','e'))
df3
sub1 <-subset(df3, x>7)
sub1
sub2 <-subset(df3, (x>6 & y>6))
sub2
sub2 <-subset(df3, (x>6 & y>4))
sub2
sub3 <-subset(df3, (x>6 | y>4))
sub3
sub3 <-subset(df3, (x>8 | y>6))
sub3
sub3 <-subset(df3, (x>9 | y>6))
sub3
na <-data.frame('No'=c(1:4), 'name'=c('kim','lee','park','na'))
na
tel <-data.frame('no'=c(2,3,4,7), 'tel'=c('02','031','032','010'))
tel
# merge() : df 병합
user1 <-merge(na, tel, by.x='No', by.y="No")
# merge() : df 병합
user1 <-merge(na, tel, by.x='No', by.y="No")
tel <-data.frame('No'=c(2,3,5,7), 'tel'=c('02','031','032','010'))
# merge() : df 병합
user1 <-merge(na, tel, by.x='No', by.y="No")
user1
# merge() : df 병합
# 두 'No'가 같은 행만 추출, 병합됨
user1 <-merge(na, tel, by.x='No', by.y="No")
user1
user2 <-merge(na, tel, by.x='No')
user2
a <-c(11:15)
b <-c(21:25)
c <-c(41:45)
x <-data.frame(a,b,c)
x
colnames(x) <-c('A 제품 판매', 'B 제품 판매', 'C 제품 판매')
x
rownames(x) <-c('서울', '경기', '인천', '대전')
x
rownames(x) <-c('서울', '경기', '인천', '대전', '광주')
x
# colsums()
colsums(x[,-4])
# colsums()
colsums(x[,-2])
# colSums()
colSums(x[,-2])
colSums(x[,-4])
colSums(x[,])
colSums(x[,-3])
colSums(x[,-3]) # C 제외
colSums(x[,-1])
# rowSum() : 행 합계
rowSums(x[,])
rowSums(x[2,3])
rowSums(x[2,])
rowSums(x[4,])
rowSums(x[,4])
# colSums() : 열 합계
# 열 합계이므로 콤마(,) 뒤에만 인덱스를 입력할 수 있다
colSums(x[2,]) # 모든 열 합계
# colSums() : 열 합계
# 열 합계이므로 콤마(,) 뒤에만 인덱스를 입력할 수 있다
colSums(x[2,]) # 모든 열 합계
colSums(x[,]) # 모든 열 합계
# colSums() : 열 합계
# 열 합계이므로 콤마(,) 뒤에만 인덱스를 입력할 수 있다
colSums(x[2,]) # 모든 열 합계
# colSums() : 열 합계
# 열 합계이므로 콤마(,) 뒤에만 인덱스를 입력할 수 있다
colSums(x[0,]) # 모든 열 합계
# rowSum() : 행 합계
rowSums(x[,]) # 모든 행 합계
x
rowSums(x[-3,])
rowSums(x[,-3])
colSums(x[-1,]) # A제외
colSums(x[-2,]) # 서울 제외
# colMeans() : 열 평균
colMeans(x[,])
rowMeans(x[,])
# list : 성격이 다른 데이터형과 데이터 구조 등을 생성할 수 있게 지원
lst <-list(5.254, "vacation", c(2:5))
lst
View(lst)
lst[[3]][1][0]
lst[[3]][1]
lst[[2]]
lst[[3]][2] # 3
lst
a1 <- c(1:10)
b1 <- matrix(1:10, nrow=2, ncol=5)
b1
a1
c1 <- c("1st", '2ed')
lst2 <- list(a=a1, b=b1, c=c1)
lst2
lst2$a
lst2$b
lst3 <-list(d=2:10*10)
lst3
lst23 <- list(lst2, lst3)
lst23
scol <-list(60:90:10)
scol <-list(seq(60,90,10))
scol
scol1 <-list(seq(60,90,10))
scol2 <-list(c("A", "B"))
scol12 <-list(scol1, scol2)
scol12
scol1[scol>=80]
scol1[scol1>=80]
scol1 <-list(60,70,80,90)
scol2 <-list(c("A", "B"))
scol12 <-list(scol1, scol2)
scol1
scol12
scol1[scol1>=80]
scol3 <- list(c(60,70,80,90))
scol3
scol1
scol1;scol3
# list 형태를 vector로 변경
unlist(sol1)
# list 형태를 vector로 변경
unlist(scol1)
unlist(scol2)
unlist(scol12)
a <-list(c(1:5))
a
b <-list(c(112:120))
b
lapply(c(a,b), mean)
sapply(c(a,b), mean)
# 데이터 타입 확인 및 변환
a <- c(11:13)
b <- c(21:23)
c <- c('seoul', 'incheon')
a;b;c
x <- data.frame(a,b)
x
# class() : 데이터타입 확인
class(x)
class(c)
class(a)
# 데이터형 확인
x <- c(10,20,30)
# 데이터형 확인
x <- c(10,20,"30")
x
is.vector(x)
is.numeric(x)
is.character(x)
s <-c(10:20)
s
t <- TRUE
is.character(s)
is.numeric(s)
is.logical(t)
class(x)
y1 <- x-3
#error : y1 <- x-3
y2 <- as.numeric(x)-3
y2
area <- c('seoul', 'seoul', 'busan', 'jeju', 'gwangju', 'jeju')
plot(area)
# error : plot(area)
area1 <- as.factor(area)
area1
plt(area1)
plot(area1)
table(area1)
table(area)
table(area1)
table(area)
# 타입 확인
mode(area)
class(area)
mode(area1)
class(area1)
# 타입 확인
mode(area);class(area)
mode(area1);class(area1)
# 데이터 입력
# scan()
fig <- scan()
fig
# 데이터 입력
# scan() : 원하는 만큼 입력할 수 있음
# 입력을 종료하고 싶을 때는 마우것도 입력하지 않고 enter
fig <- scan()
# 데이터 입력
# scan() : 원하는 만큼 입력할 수 있음
# 입력을 종료하고 싶을 때는 아무것도 입력하지 않고 enter
# 숫자와 문자를 혼용하면 error
fig <- scan()
sum(fig)
chr <- scan(what=character())
chr
chr <- scan(what=character())
chr
# edit()
dfx <- data.frame()
dfx
dfx <- edit(dfx)
dfx <- edit(dfx)
# edit()
dfx <- data.frame()
dfx <- edit(dfx)
dfx
v1 <-vactor()
# setwd() : 작업폴더 설정 함수
setwd("C:/Users/admin/Documents/GitHub/TIL/R/R Programming and Big Data Analysis/Data_Analysis/r_exam")
# getwd() : 현재 작업 폴더 반환
getwd()
# csv 파일과 txt 파일 가져오기
dfs1 <- read.csv("student_list.csv", encoding=udf-8)
# csv 파일과 txt 파일 가져오기
dfs1 <- read.csv("student_list.csv", encoding=CP949)
# csv 파일과 txt 파일 가져오기
dfs1 <- read.csv("student_list.csv", encoding='CP949')
# csv 파일과 txt 파일 가져오기
dfs1 <- read.csv("student_list.csv", encoding='UTF-8')
dfs1
# csv 파일과 txt 파일 가져오기
dfs1 <- read.csv("student_list.csv", header=T, sep=",")
# csv 파일과 txt 파일 가져오기
dfs1 <- read.csv("student_list.csv", fileEncoding="euc-kr")
dfs1
str(dfs1)
View(dfs1)
dfs1 <_read.csv("student_list.csv", header="FALSE")
dfs1 <-read.csv("student_list.csv", header="FALSE")
dfs1 <-read.csv("student_list.csv", header=FALSE)
dfs1 <-read.csv("student_list.csv", header=FALSE, fileEncoding="euc-kr")
dfs1
# csv 파일과 txt 파일 가져오기
dfs1 <- read.csv("student_list.csv", fileEncoding="euc-kr")
dfs1
# 데이터 확인
str(dfs1)
View(dfs2)
# 새 탭에서 데이터 확인
View(dfs1)
dfs2 <-read.csv("student_list.csv", header=FALSE, fileEncoding="euc-kr")
View(dfs2)
# header=FALSE : 1행을 열 제목으로 지정하지 않음
# 기본값=TRUE
dfs2 <-read.csv("student_list.csv", header=FALSE, fileEncoding="euc-kr")
# txt 파일 읽어오기
read.table(file="student_list.txt", header=T)
# txt 파일 읽어오기
read.table(file="student_list.txt", header=T, fileEncoding="euc-kr")
# txt 파일 읽어오기
dfs3 <- read.table(file="student_list.txt", header=T, fileEncoding="euc-kr")
str(dfs3)
# scan() 함수로 데이터 읽어오기
nc <- scan("숫자값.txt", fileEncoding="euc-kr")
nc
str(nc)
# excel 파일 읽어오기
# 외부 패키지 설치 필요(R 프로그래밍의 확장성)
install.packages("readxl")
library(readxl)
sl_exc <- read_excel(path="student_list.xlsx", fileEncoding="euc-kr")
sl_exc <- read_excel(path="student_list.xlsx")
sl_excel <- read_excel(path="student_list.xlsx")
sl_excel
str(sl_excel)
# 여러 시트가 존재하는 excel 파일에서 특정 시트만 불러오기
sl_sheet <-read_excel(path="student_list.xlsx", sheet="student_list")
# 데이터를 파일로 저장
sink("task.txt")
dfs1 <- read.csv("student_list.csv", fileEncoding="euc-kr")
dfs1
dfs2 <- read.table(file="student_list.txt", fileEncoding="euc-kr")
dfs2 <- read.table(file="student_list.txt", header=T, fileEncoding="euc-kr")
dfs2
dfx <- rbind(dfs1, dfs2)
dfx
sink()
dfs1
# sink() 마무리했으므로 이제 콘솔창에 표시됨
dfs1;dfs2;dfx
# txt 파일 저장하기
# write.table()
write.table(dfx, "student_combine.txt")
# txt 파일 저장하기
# write.table()
write.table(dfx, "student_combine.txt", row.names=T, quote=F)
# txt 파일 저장하기
# write.table()
write.table(dfx, "student_combine.txt", row.names=T, quote=F)
# txt 파일 저장하기
# write.table()
write.table(dfx, "student_combine.txt", row.names=T, quote=T)
# txt 파일 저장하기
# write.table()
# row.names=T : 행 이름 설정O
# quote=F : 각 데이터 따옴표X
write.table(dfx, "student_combine.txt", row.names=T, quote=F)
# csv 파일 저장하기
# write.csv()
write.csv(dfx, "student_combine.csv", row.names=T)
# csv 파일 저장하기
# write.csv()
write.csv(dfx, "student_combine.csv", row.names=T, fileEncoding="euc-kr")
# excel 파일 저장하기
# 외부 패키지 설치 필요
install.packages("writexl")
library(writexl)
write_xlsx(dfx, path="student_combine.xlsx", col_names=T)
# 데이터 확인
getwd()
# 데이터 확인
# 현재 디렉터리 확인
getwd()
data <- read.csv("도로교통공단_사고유형별 월별 교통사고(2018).csv", header=T, fileEncoding="euc-kr")
str(data)
Viex(data)
View(data)
head(data)
# 하위 데이터 확인
tail(data)
head(data, 10)
tail(data, 10)
data$사고유형
View(data)
# 컬럼 별 데이터 확인
data$사고유형
data$경상자수
data[,c("사고유형","경상자수")]
head(data[,c("사고유형", "경상자수")])
data[1:3, ]
# 1-3행, 모든 열
data[1:3, ]
data[1:3, c("사고유형", "경상자수")]
data2 <- read.csv("서울특별시_강남구_불법주정차단속현황_20210208 - 결측치.csv", fileEncoding="euc-kr")
data2
View(data2)
head(data2, 8)
tail(data2, 6)
data2$동명
data2$부과건수
data2["동명"]
data2[ , C("견인건수", "부과건수")]
data2[ ,c"견인건수", "부과건수")]
data2[ ,c("견인건수", "부과건수")]
